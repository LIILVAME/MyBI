#!/usr/bin/env node

/**
 * Script de g√©n√©ration du rapport de sant√© global Doogoo
 * Compile tous les rapports d'audit et g√©n√®re un rapport consolid√©
 */

import { readFileSync, existsSync, writeFileSync, mkdirSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
const rootDir = join(__dirname, '..')
const docsDir = join(rootDir, 'docs')

/**
 * Lit un rapport JSON s'il existe
 */
function readJsonReport(filename) {
  const filepath = join(docsDir, filename)
  if (existsSync(filepath)) {
    try {
      return JSON.parse(readFileSync(filepath, 'utf-8'))
    } catch (error) {
      return null
    }
  }
  return null
}

/**
 * G√©n√®re le rapport de sant√© global
 */
function generateHealthReport() {
  const timestamp = new Date().toISOString()
  
  // Lit les rapports existants
  const vercelReport = readJsonReport('VERCEL_ENV_AUDIT_REPORT.json')
  const connectivityReport = readJsonReport('SUPABASE_CONNECTIVITY_LOG.json')
  
  // Calcule le statut global
  let overallStatus = '‚úÖ HEALTHY'
  let issues = []
  
  // V√©rifie Vercel
  if (vercelReport) {
    if (vercelReport.summary.status !== '‚úÖ OK') {
      overallStatus = '‚ö†Ô∏è  ISSUES DETECTED'
      issues.push('Variables d\'environnement Vercel manquantes ou non configur√©es')
    }
  } else {
    overallStatus = '‚ö†Ô∏è  INCOMPLETE'
    issues.push('Rapport Vercel non g√©n√©r√© - ex√©cutez "npm run audit:vercel"')
  }
  
  // V√©rifie Connectivit√©
  if (connectivityReport) {
    if (!connectivityReport.summary.allTestsPassed) {
      overallStatus = '‚ùå CRITICAL'
      issues.push('Tests de connectivit√© Supabase √©chou√©s')
    }
  } else {
    if (overallStatus === '‚úÖ HEALTHY') {
      overallStatus = '‚ö†Ô∏è  INCOMPLETE'
    }
    issues.push('Rapport de connectivit√© non g√©n√©r√© - ex√©cutez "npm run audit:supabase"')
  }
  
  // G√©n√®re le rapport Markdown
  let markdown = `# üè• Rapport de Sant√© - D√©ploiement Doogoo\n\n`
  markdown += `**Date** : ${timestamp}\n`
  markdown += `**Statut Global** : ${overallStatus}\n\n`
  
  markdown += `---\n\n`
  
  markdown += `## üìä R√©sum√© Ex√©cutif\n\n`
  markdown += `Le statut global du d√©ploiement Doogoo est **${overallStatus}**.\n\n`
  
  if (issues.length > 0) {
    markdown += `### ‚ö†Ô∏è  Probl√®mes D√©tect√©s\n\n`
    issues.forEach((issue, index) => {
      markdown += `${index + 1}. ${issue}\n`
    })
    markdown += `\n`
  } else {
    markdown += `‚úÖ Aucun probl√®me d√©tect√©. Le d√©ploiement est op√©rationnel.\n\n`
  }
  
  markdown += `---\n\n`
  
  // Section Vercel
  markdown += `## 1Ô∏è‚É£ Variables d'Environnement Vercel\n\n`
  if (vercelReport) {
    markdown += `**Statut** : ${vercelReport.summary.status}\n\n`
    markdown += `- Variables requises pr√©sentes : ${vercelReport.summary.requiredVarsPresent}/${vercelReport.summary.requiredVarsTotal}\n`
    
    if (vercelReport.localEnvironment.missingVars.length > 0) {
      markdown += `\n### ‚ùå Variables Manquantes\n\n`
      vercelReport.localEnvironment.missingVars.forEach(key => {
        markdown += `- \`${key}\`\n`
      })
    }
    
    if (vercelReport.recommendations.length > 0) {
      markdown += `\n### üí° Recommandations\n\n`
      vercelReport.recommendations.forEach(rec => {
        const icon = rec.severity === 'CRITICAL' ? 'üî¥' : rec.severity === 'WARNING' ? 'üü°' : 'üîµ'
        markdown += `${icon} **${rec.severity}** : ${rec.message}\n\n`
        markdown += `   ‚Üí ${rec.action}\n\n`
      })
    }
    
    markdown += `\nüìÑ **Rapport complet** : [VERCEL_ENV_AUDIT_REPORT.md](./VERCEL_ENV_AUDIT_REPORT.md)\n\n`
  } else {
    markdown += `‚ö†Ô∏è  **Rapport non disponible**\n\n`
    markdown += `Ex√©cutez \`npm run audit:vercel\` pour g√©n√©rer le rapport.\n\n`
  }
  
  markdown += `---\n\n`
  
  // Section Connectivit√©
  markdown += `## 2Ô∏è‚É£ Connectivit√© Supabase\n\n`
  if (connectivityReport) {
    markdown += `**Statut** : ${connectivityReport.summary.allTestsPassed ? '‚úÖ **SUCC√àS**' : '‚ùå **√âCHEC**'}\n\n`
    markdown += `- Tests r√©ussis : ${connectivityReport.summary.passedTests}/${connectivityReport.summary.totalTests}\n\n`
    
    markdown += `### D√©tails des Tests\n\n`
    
    // Test 1: Disponibilit√©
    const appTest = connectivityReport.tests.appAvailability
    markdown += `#### 1. Disponibilit√© de l'Application\n`
    markdown += `- **Statut** : ${appTest.success ? '‚úÖ OK' : '‚ùå √âCHEC'}\n`
    if (appTest.status) markdown += `- **HTTP Status** : ${appTest.status}\n`
    if (appTest.hasAppMount !== undefined) {
      markdown += `- **Point de montage** : ${appTest.hasAppMount ? '‚úÖ Trouv√©' : '‚ùå Non trouv√©'}\n`
    }
    markdown += `\n`
    
    // Test 2: Variables dans bundle
    const envTest = connectivityReport.tests.envVarsInBundle
    markdown += `#### 2. Variables d'Environnement dans le Bundle\n`
    if (envTest.error) {
      markdown += `- **Statut** : ‚ùå Erreur\n`
      markdown += `- **Erreur** : ${envTest.error}\n`
    } else {
      markdown += `- **Statut** : ${envTest.success ? '‚úÖ OK' : '‚ö†Ô∏è  PARTIEL'}\n`
      markdown += `- **VITE_SUPABASE_URL** : ${envTest.hasSupabaseUrl ? '‚úÖ' : '‚ùå'}\n`
      markdown += `- **VITE_SUPABASE_ANON_KEY** : ${envTest.hasSupabaseKey ? '‚úÖ' : '‚ùå'}\n`
      if (envTest.hasUndefinedError) {
        markdown += `- ‚ö†Ô∏è  **Erreurs 'undefined' d√©tect√©es**\n`
      }
    }
    markdown += `\n`
    
    // Test 3: Supabase direct
    const supabaseTest = connectivityReport.tests.supabaseDirect
    markdown += `#### 3. Connexion Supabase Directe\n`
    if (supabaseTest.skipped) {
      markdown += `- **Statut** : ‚ö™ Ignor√©\n`
      markdown += `- **Raison** : ${supabaseTest.reason}\n`
    } else {
      markdown += `- **Statut** : ${supabaseTest.success ? '‚úÖ OK' : '‚ùå √âCHEC'}\n`
      if (supabaseTest.status) markdown += `- **HTTP Status** : ${supabaseTest.status}\n`
    }
    markdown += `\n`
    
    markdown += `üìÑ **Rapport complet** : [SUPABASE_CONNECTIVITY_LOG.md](./SUPABASE_CONNECTIVITY_LOG.md)\n\n`
  } else {
    markdown += `‚ö†Ô∏è  **Rapport non disponible**\n\n`
    markdown += `Ex√©cutez \`npm run audit:supabase\` pour g√©n√©rer le rapport.\n\n`
  }
  
  markdown += `---\n\n`
  
  // Section Configuration Supabase
  markdown += `## 3Ô∏è‚É£ Configuration Supabase\n\n`
  markdown += `üìÑ **Guide de validation** : [SUPABASE_CONFIG_VALIDATION_REPORT.md](./SUPABASE_CONFIG_VALIDATION_REPORT.md)\n\n`
  markdown += `‚ö†Ô∏è  **Action requise** : Compl√©ter manuellement le guide de validation dans le Dashboard Supabase.\n\n`
  
  markdown += `### Checklist Rapide\n\n`
  markdown += `- [ ] Site URL = \`https://doogoo.vercel.app\`\n`
  markdown += `- [ ] Redirect URLs inclut \`https://doogoo.vercel.app/**\`\n`
  markdown += `- [ ] Templates email utilisent \`{{ .ConfirmationURL }}\`\n`
  markdown += `- [ ] Test OAuth Google r√©ussi\n`
  markdown += `- [ ] Test OAuth Apple r√©ussi\n`
  markdown += `\n`
  
  markdown += `---\n\n`
  
  // Actions Correctives
  if (overallStatus !== '‚úÖ HEALTHY') {
    markdown += `## üîß Actions Correctives\n\n`
    
    if (vercelReport && vercelReport.localEnvironment.missingVars.length > 0) {
      markdown += `### 1. Variables Vercel Manquantes\n\n`
      markdown += `1. Aller dans [Vercel Dashboard](https://vercel.com/dashboard)\n`
      markdown += `2. S√©lectionner le projet **Doogoo**\n`
      markdown += `3. **Settings ‚Üí Environment Variables**\n`
      markdown += `4. Ajouter les variables manquantes :\n\n`
      vercelReport.localEnvironment.missingVars.forEach(key => {
        markdown += `   - \`${key}\`\n`
      })
      markdown += `\n`
      markdown += `5. **IMPORTANT** : Cocher **"Included in Build"** pour chaque variable\n`
      markdown += `6. Sauvegarder\n`
      markdown += `7. **Redeploy** le dernier d√©ploiement\n\n`
    }
    
    if (connectivityReport && !connectivityReport.summary.allTestsPassed) {
      markdown += `### 2. Probl√®mes de Connectivit√©\n\n`
      
      if (!connectivityReport.tests.appAvailability.success) {
        markdown += `- **Application non disponible** : V√©rifier les logs de d√©ploiement Vercel\n\n`
      }
      
      if (!connectivityReport.tests.envVarsInBundle.success || 
          connectivityReport.tests.envVarsInBundle.hasUndefinedError) {
        markdown += `- **Variables non inject√©es** :\n`
        markdown += `  1. V√©rifier "Included in Build" dans Vercel\n`
        markdown += `  2. Forcer un nouveau build (commit vide)\n`
        markdown += `  3. V√©rifier que les variables ne sont pas vides\n\n`
      }
      
      if (connectivityReport.tests.supabaseDirect && !connectivityReport.tests.supabaseDirect.success) {
        markdown += `- **Connexion Supabase √©choue** :\n`
        markdown += `  1. V√©rifier que \`VITE_SUPABASE_URL\` est correcte\n`
        markdown += `  2. V√©rifier que \`VITE_SUPABASE_ANON_KEY\` est valide\n`
        markdown += `  3. V√©rifier les logs Supabase pour erreurs\n\n`
      }
    }
    
    markdown += `### 3. Configuration Supabase\n\n`
    markdown += `1. Aller dans [Supabase Dashboard](https://app.supabase.com)\n`
    markdown += `2. **Authentication ‚Üí URL Configuration**\n`
    markdown += `3. V√©rifier **Site URL** = \`https://doogoo.vercel.app\`\n`
    markdown += `4. Ajouter **Redirect URLs** : \`https://doogoo.vercel.app/**\`\n`
    markdown += `5. Sauvegarder\n\n`
  }
  
  markdown += `---\n\n`
  
  // Commandes Utiles
  markdown += `## üìã Commandes Utiles\n\n`
  markdown += `\`\`\`bash\n`
  markdown += `# Audit des variables Vercel\n`
  markdown += `npm run audit:vercel\n\n`
  markdown += `# Test de connectivit√© Supabase\n`
  markdown += `npm run audit:supabase\n\n`
  markdown += `# Tous les audits\n`
  markdown += `npm run audit:all\n\n`
  markdown += `# G√©n√©rer le rapport de sant√©\n`
  markdown += `npm run audit:health\n`
  markdown += `\`\`\`\n\n`
  
  markdown += `---\n\n`
  
  markdown += `## üìä Statut Final\n\n`
  markdown += `| Composant | Statut |\n`
  markdown += `|-----------|--------|\n`
  
  if (vercelReport) {
    markdown += `| Variables Vercel | ${vercelReport.summary.status} |\n`
  } else {
    markdown += `| Variables Vercel | ‚ö™ Non v√©rifi√© |\n`
  }
  
  if (connectivityReport) {
    markdown += `| Connectivit√© Supabase | ${connectivityReport.summary.allTestsPassed ? '‚úÖ OK' : '‚ùå √âCHEC'} |\n`
  } else {
    markdown += `| Connectivit√© Supabase | ‚ö™ Non v√©rifi√© |\n`
  }
  
  markdown += `| Configuration Supabase | ‚ö™ Validation manuelle requise |\n`
  
  markdown += `\n`
  markdown += `**Statut Global** : **${overallStatus}**\n\n`
  
  markdown += `---\n\n`
  markdown += `**Derni√®re mise √† jour** : ${timestamp}\n`
  
  // Sauvegarde le rapport
  const reportPath = join(docsDir, 'DOOGOO_DEPLOYMENT_HEALTH_REPORT.md')
  writeFileSync(reportPath, markdown, 'utf-8')
  
  console.log('\n' + '‚ïê'.repeat(60))
  console.log('üè• RAPPORT DE SANT√â DOOGOO')
  console.log('‚ïê'.repeat(60))
  console.log(`\nüìä Statut Global : ${overallStatus}\n`)
  
  if (issues.length > 0) {
    console.log('‚ö†Ô∏è  Probl√®mes d√©tect√©s :')
    issues.forEach((issue, index) => {
      console.log(`   ${index + 1}. ${issue}`)
    })
  } else {
    console.log('‚úÖ Aucun probl√®me d√©tect√©\n')
  }
  
  console.log(`\n‚úÖ Rapport g√©n√©r√© : ${reportPath}\n`)
  console.log('‚ïê'.repeat(60) + '\n')
  
  return { overallStatus, issues }
}

// Ex√©cution
try {
  generateHealthReport()
  process.exit(0)
} catch (error) {
  console.error('\n‚ùå Erreur lors de la g√©n√©ration du rapport:', error.message)
  console.error(error.stack)
  process.exit(1)
}

